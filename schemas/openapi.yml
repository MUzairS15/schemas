openapi: 3.0.0
info:
  title: Meshery Cloud
  description: Documentation for meshery Cloud REST APIs
  contact:
    email: support@layer5.io
  version: v0.6.394
servers:
  - url: https://meshery.layer5.io
    description: Meshery Cloud production server URL
  - url: https://staging-meshery.layer5.io
    description: Meshery Cloud staging server URL
  - url: http://localhost:9876
    description: >-
      Meshery Cloud development server URL (controlled via PORT environment
      variable)
tags:
  - name: integrations
    description: APIs for integrations
    x-displayName: integrations
  - name: patterns
    description: APIs for patterns
    x-displayName: patterns
  - name: relationshipEvaluation_other
    x-displayName: other
  - name: workspaces
    description: Workspaces bring teams, environments, and designs together
    x-displayName: workspaces
paths:
  /api/integrations/connections:
    post:
      tags:
        - integrations
      operationId: RegisterConnection
      summary: Register Connection
      description: Register with Meshery Cloud
      requestBody:
        $ref: '#/components/requestBodies/connectionPayload'
      responses:
        '200':
          description: Inserted connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
    get:
      tags:
        - integrations
      operationId: GetConnections
      summary: Get connections
      description: Get connections
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Paginated list of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/{connectionId}:
    put:
      tags:
        - integrations
      operationId: EditConnectionByID
      summary: Edit Connection by ID
      description: Edit registered connection using the connection ID
      parameters:
        - $ref: '#/components/parameters/connectionId'
      requestBody:
        $ref: '#/components/requestBodies/connectionPayload'
      responses:
        '200':
          description: Edited connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/status:
    get:
      tags:
        - integrations
      operationId: GetConnectionStatus
      summary: Get status of all connections
      description: Get summary about the status of all connections
      responses:
        '200':
          description: Status of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionsStatusPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/{connectionKind}:
    get:
      tags:
        - integrations
      operationId: GetConnectionsByKind
      summary: Get connections by kind
      description: Get connections by kind
      parameters:
        - $ref: '#/components/parameters/connectionKind'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Connections by kind
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security: []
    delete:
      tags:
        - integrations
      operationId: DeleteConnection
      summary: Delete connection
      description: Delete registered connection
      parameters:
        - $ref: '#/components/parameters/connectionKind'
      responses:
        '200':
          description: Deleted connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/{connectionKind}/{connectionId}:
    get:
      tags:
        - integrations
      operationId: GetConnectionsByKindAndConnectionID
      summary: Get connections by kind and connectionID.
      description: >-
        Get connections by kind (kind is required because this API returns the
        results in non std format of a connection)
      parameters:
        - $ref: '#/components/parameters/connectionKind'
        - $ref: '#/components/parameters/connectionId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Connections by kind
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/k8sContextPersistResponse'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /api/integrations/connections/meshery/{mesheryServerID}:
    delete:
      tags:
        - integrations
      operationId: DeleteMesheryConnection
      summary: Delete Meshery connection
      description: >-
        Deletes a given meshery connection. This is generally used for deleting
        connections from Meshery Server UI where UI is not aware of connection
        IDs.
      parameters:
        - $ref: '#/components/parameters/serverId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - jwt: []
  /evaluate:
    post:
      summary: Evaluate relationships in a design
      description: >-
        Performs relationship evaluation on a given design, applying policies
        and updating components and relationships as needed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationRequest'
      responses:
        '200':
          description: Successful evaluation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResponse'
        '400':
          description: Bad request
        '500':
          description: Internal server error
      tags:
        - relationshipEvaluation_other
components:
  schemas:
    connection:
      $id: https://schemas.meshery.io/component.json
      $schema: http://json-schema.org/draft-07/schema#
      description: >-
        Meshery Connections are managed and unmanaged resources that either
        through discovery or manual entry are tracked by Meshery. Learn more at
        https://docs.meshery.io/concepts/logical/connections
      additionalProperties: false
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
          description: ID
        name:
          x-oapi-codegen-extra-tags:
            db: name
            yaml: name
          type: string
          description: Connection Name
        credential_id:
          x-go-name: CredentialId
          x-oapi-codegen-extra-tags:
            db: credential_id
            yaml: credential_id
          $ref: '#/components/schemas/uuid'
          description: Credential ID
        type:
          x-oapi-codegen-extra-tags:
            db: type
            yaml: type
          type: string
          description: Connection Type
        sub_type:
          x-oapi-codegen-extra-tags:
            db: sub_type
            yaml: sub_type
          type: string
          description: Connection Subtype
        kind:
          x-oapi-codegen-extra-tags:
            db: kind
            yaml: kind
          type: string
          description: Connection Kind
        metadata:
          x-oapi-codegen-extra-tags:
            db: metadata
            yaml: metadata
          type: object
        status:
          x-oapi-codegen-extra-tags:
            db: status
            yaml: status
          description: Connection Status
          type: string
          enum:
            - discovered
            - registered
            - connected
            - ignored
            - maintenance
            - disconnected
            - deleted
            - not found
        user_id:
          x-go-name: UserID
          x-oapi-codegen-extra-tags:
            yaml: user_id
            json: user_id
          $ref: '#/components/schemas/uuid'
        created_at:
          $ref: '#/components/schemas/time'
          x-oapi-codegen-extra-tags:
            yaml: created_at
            json: created_at
        updated_at:
          $ref: '#/components/schemas/time'
          x-oapi-codegen-extra-tags:
            yaml: updated_at
            json: updated_at
        deleted_at:
          $ref: '#/components/schemas/time'
          x-oapi-codegen-extra-tags:
            yaml: deleted_at
            json: deleted_at
    mesheryInstance:
      properties:
        id:
          $ref: '#/components/schemas/id'
          description: Connection id
        name:
          $ref: '#/components/schemas/text'
          description: Connection name
        server_id:
          $ref: '#/components/schemas/text'
          description: Connected server id
        server_version:
          $ref: '#/components/schemas/text'
          description: Running server version
        server_location:
          $ref: '#/components/schemas/text'
        server_build_sha:
          $ref: '#/components/schemas/text'
          description: Server build SHA
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/time'
        status:
          $ref: '#/components/schemas/text'
          description: Status
    connectionPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            connections:
              x-go-type-skip-optional-pointer: true
              type: array
              items:
                $ref: '#/components/schemas/connection'
    connectionStatusInfo:
      properties:
        status:
          $ref: '#/components/schemas/text'
          description: Connection status
        count:
          type: integer
          description: Number of connections having the status
          x-go-type-skip-optional-pointer: true
    connectionsStatusPage:
      properties:
        connections_status:
          x-go-type-skip-optional-pointer: true
          type: array
          items:
            $ref: '#/components/schemas/connectionStatusInfo'
    k8sContext:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
        auth:
          $ref: '#/components/schemas/map_object'
        cluster:
          $ref: '#/components/schemas/map_object'
        server:
          type: string
        owner:
          $ref: '#/components/schemas/id'
        created_by:
          $ref: '#/components/schemas/id'
        meshery_instance_id:
          $ref: '#/components/schemas/id'
        kubernetes_server_id:
          $ref: '#/components/schemas/id'
        deployment_type:
          type: string
        updated_at:
          $ref: '#/components/schemas/time'
        created_at:
          $ref: '#/components/schemas/time'
    k8sContextPersistResponse:
      properties:
        k8sContext:
          $ref: '#/components/schemas/k8sContext'
        inserted:
          type: boolean
    resultsPage:
      discriminator:
        propertyName: resultType
      properties:
        page:
          type: integer
          x-go-type-skip-optional-pointer: true
        page_size:
          type: integer
          x-go-type-skip-optional-pointer: true
        total_count:
          type: integer
          x-go-type-skip-optional-pointer: true
        resultType:
          type: string
          x-go-type-skip-optional-pointer: true
      x-go-type-skip-optional-pointer: true
    uuid:
      type: string
      format: uuid
      description: >-
        A Universally Unique Identifier used to uniquely identify entites in
        Meshery. The UUID core defintion is used across different schemas.
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
    time:
      type: string
      format: date-time
      x-go-type-skip-optional-pointer: true
    text:
      type: string
      x-go-type-skip-optional-pointer: true
    map_object:
      type: object
      additionalProperties:
        type: string
      x-go-type-skip-optional-pointer: true
    id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-go-type-skip-optional-pointer: true
    model_definition:
      $ref: '#/components/schemas/model'
    component_definition:
      $ref: '#/components/schemas/component'
    capability:
      $id: https://schemas.meshery.io/capability.json
      $schema: http://json-schema.org/draft-07/schema#
      description: >-
        Meshery manages entities in accordance with their specific capabilities.
        This field explicitly identifies those capabilities largely by what
        actions a given component supports; e.g. metric-scrape, sub-interface,
        and so on. This field is extensible. Entities may define a broad array
        of capabilities, which are in-turn dynamically interpretted by Meshery
        for full lifecycle management.
      additionalProperties: false
      type: object
      required:
        - schemaVersion
        - version
        - displayName
        - kind
        - type
        - entityState
        - status
      x-oapi-codegen-extra-tags:
        gorm: type:bytes;serializer:json
      properties:
        schemaVersion:
          $ref: '#/components/schemas/versionString'
          description: >-
            Specifies the version of the schema to which the capability
            definition conforms.
        version:
          $ref: '#/components/schemas/semverString'
          description: Version of the capability definition.
        displayName:
          $ref: '#/components/schemas/inputString'
          description: Name of the capability in human-readible format.
        description:
          type: string
          description: >-
            A written representation of the purpose and characteristics of the
            capability.
        kind:
          $ref: '#/components/schemas/inputString'
          description: Top-level categorization of the capability
          additionalProperties: false
          # anyOf:
          #   - const: action
          #     description: >-
          #       For capabilities related to executing actions on entities.
          #       Example: initiate log streaming on a Pod. Example: initiate
          #       deployment of a component.
          #   - const: mutate
          #     description: >-
          #       For capabilities related to mutating an entity. Example: the
          #       ability to change the configuration of a component.
          #   - const: view
          #     description: >-
          #       For capabilities related to viewing an entity. Example: the
          #       ability to view a components configuration.
          #   - const: interaction
          #     description: >-
          #       Catch all for capabilities related to interaction with entities.
          #       Example: the ability for a component to be dragged and dropped.
          #       Example: supports event bubbling to parent components. 
        type:
          $ref: '#/components/schemas/inputString'
          description: >-
            Classification of capabilities. Used to group capabilities similar
            in nature.
        subType:
          $ref: '#/components/schemas/inputString'
          description: >-
            Most granular unit of capability classification. The combination of
            Kind, Type and SubType together uniquely identify a Capability.
        key:
          $ref: '#/components/schemas/inputString'
          description: Key that backs the capability.
        entityState:
          description: State of the entity in which the capability is applicable.
          type: array
          items:
            $ref: '#/components/schemas/inputString'
            type: string
            enum:
              - declaration
              - instance
        status:
          type: string
          description: Status of the capability
          default: enabled
          enum:
            - enabled
            - disabled
        metadata:
          type: object
          description: >-
            Metadata contains additional information associated with the
            capability. Extension point.
          additionalProperties: true
    relationship_definition:
      $ref: '#/components/schemas/relationship'
    versionString:
      type: string
      minLength: 2
      maxLength: 100
      description: API version of the object
      pattern: ([a-z.])*(?!^/)v(alpha|beta|[0-9]+)([.-]*[a-z0-9]+)*$
      example:
        - v1
        - v1alpha1
        - v2beta3
        - v1.custom-suffix
    semverString:
      type: string
      minLength: 5
      maxLength: 100
      pattern: >-
        ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$
      description: >-
        A valid semantic version string between 5 and 256 characters. The
        pattern allows for a major.minor.patch version followed by an optional
        pre-release tag like '-alpha' or '-beta.2' and an optional build
        metadata tag like '+build.1.
    inputString:
      type: string
      pattern: ^[a-zA-Z_][a-zA-Z0-9_-]*[a-zA-Z0-9_]$
      description: >-
        A string starting with an alphanumeric character. Spaces and hyphens
        allowed.
    model:
      $id: https://schemas.meshery.io/model.json
      $schema: http://json-schema.org/draft-07/schema#
      description: >-
        Meshery Models serve as a portable unit of packaging to define managed
        entities, their relationships, and capabilities.
      additionalProperties: false
      type: object
      properties:
        id:
          description: >-
            Uniquely identifies the entity (i.e. component) as defined in a
            declaration (i.e. design).
          $ref: '#/components/schemas/uuid'
        schemaVersion:
          description: Specifies the version of the schema used for the definition.
          minLength: 1
          maxLength: 50
          type: string
          pattern: ([a-z.])*(?!^/)v(alpha|beta|[0-9]+)([.-]*[a-z0-9]+)*$
          example:
            - v1
            - v1alpha1
            - v2beta3
            - v1.custom-suffix
          x-oapi-codegen-extra-tags:
            yaml: schemaVersion
            json: schemaVersion
        version:
          description: Version of the model definition.
          type: string
          minLength: 5
          maxLength: 100
          pattern: >-
            ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$
          x-oapi-codegen-extra-tags:
            yaml: version
            json: version
        name:
          description: The unique name for the model within the scope of a registrant.
          minLength: 1
          maxLength: 100
          type: string
          pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
          x-oapi-codegen-extra-tags:
            yaml: name
            json: name
        displayName:
          description: Human-readable name for the model.
          minLength: 1
          maxLength: 100
          type: string
          pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
          x-oapi-codegen-extra-tags:
            yaml: displayName
            json: displayName
        description:
          type: string
          description: Description of the model.
          minLength: 1
          maxLength: 1000
          x-oapi-codegen-extra-tags:
            yaml: description
            json: description
        status:
          type: string
          description: >-
            Status of model, including:

            - duplicate: this component is a duplicate of another. The component
            that is to be the canonical reference and that is duplicated by
            other components should not be assigned the 'duplicate' status.

            - maintenance: model is unavailable for a period of time.

            - enabled: model is available for use for all users of this Meshery
            Server.

            - ignored: model is unavailable for use for all users of this
            Meshery Server.
          enum:
            - ignored
            - enabled
            - duplicate
          x-oapi-codegen-extra-tags:
            yaml: status
            json: status
        registrant:
          x-oapi-codegen-extra-tags:
            yaml: registrant
            json: registrant
            gorm: foreignKey:RegistrantId;references:Id
          $ref: '#/components/schemas/connection'
        category:
          type: object
          description: Category of the model.
          properties:
            id:
              $ref: '#/components/schemas/uuid'
            name:
              type: string
              minLength: 1
              maxLength: 100
              x-oapi-codegen-extra-tags:
                yaml: name
                json: name
            metadata:
              type: object
              x-oapi-codegen-extra-tags:
                yaml: metadata
                json: metadata
          x-oapi-codegen-extra-tags:
            yaml: category
            json: category
            gorm: foreignKey:CategoryId;references:Id
        subCategory:
          type: string
          description: Sub-category of the model.
          minLength: 1
          maxLength: 100
          x-oapi-codegen-extra-tags:
            yaml: subCategory
            json: subCategory
        metadata:
          type: object
          description: >-
            Metadata containing additional information associated with the
            model.
          required:
            - name
            - version
          properties:
            capabilities:
              type: array
              description: Capabilities associated with the model
              items:
                $ref: '#/components/schemas/capability'
            isAnnotation:
              type: boolean
              description: >-
                Indicates whether the model and its entities should be treated
                as deployable entities or as logical representations.
              x-oapi-codegen-extra-tags:
                yaml: isAnnotation
                json: isAnnotation
            primaryColor:
              type: string
              description: Primary color associated with the model.
              minLength: 1
              maxLength: 50
              x-oapi-codegen-extra-tags:
                yaml: primaryColor
                json: primaryColor
            secondaryColor:
              type: string
              description: Secondary color associated with the model.
              minLength: 1
              maxLength: 50
              x-oapi-codegen-extra-tags:
                yaml: secondaryColor
                json: secondaryColor
            svgWhite:
              type: string
              description: SVG representation of the model in white color.
              minLength: 1
              x-oapi-codegen-extra-tags:
                yaml: svgWhite
                json: svgWhite
            svgColor:
              type: string
              description: SVG representation of the model in colored format.
              minLength: 1
              x-oapi-codegen-extra-tags:
                yaml: svgColor
                json: svgColor
            svgComplete:
              type: string
              description: SVG representation of the complete model.
              minLength: 1
              x-oapi-codegen-extra-tags:
                yaml: svgComplete
                json: svgComplete
          x-oapi-codegen-extra-tags:
            gorm: type:bytes;serializer:json
          additionalProperties: true
        model:
          type: object
          description: >-
            Registrant-defined data associated with the model. Properties
            pertain to the software being managed (e.g. Kubernetes v1.31)
          required:
            - version
          properties:
            version:
              description: Version of the model as defined by the registrant.
              minLength: 1
              maxLength: 100
              type: string
              pattern: ([a-z.])*(?!^/)v(alpha|beta|[0-9]+)([.-]*[a-z0-9]+)*$
              example:
                - v1
                - v1alpha1
                - v2beta3
                - v1.custom-suffix
              x-oapi-codegen-extra-tags:
                yaml: version
                json: version
          x-oapi-codegen-extra-tags:
            gorm: type:bytes;serializer:json
      required:
        - name
        - version
        - registrant
        - category
    styles:
      type: object
      description: Common styles for all entities
      additionalProperties: false
      required:
        - primaryColor
        - svgColor
        - svgWhite
      properties:
        primaryColor:
          type: string
          description: Primary color of the component used for UI representation.
        secondaryColor:
          type: string
          description: Secondary color of the entity used for UI representation.
        svgWhite:
          type: string
          description: >-
            White SVG of the entity used for UI representation on dark
            background.
        svgColor:
          type: string
          description: >-
            Colored SVG of the entity used for UI representation on light
            background.
        svgComplete:
          type: string
          description: >-
            Complete SVG of the entity used for UI representation, often
            inclusive of background.
        color:
          type: string
          description: >-
            The color of the element's label. Colours may be specified by name
            (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)),
            or HSL (e.g. hsl(0, 100%, 50%)).
        text-opacity:
          type: number
          description: The opacity of the label text, including its outline.
          minimum: 0
          maximum: 1
        font-family:
          type: string
          description: A comma-separated list of font names to use on the label text.
        font-size:
          type: string
          description: The size of the label text.
        font-style:
          type: string
          description: A CSS font style to be applied to the label text.
        font-weight:
          type: string
          description: A CSS font weight to be applied to the label text.
        text-transform:
          type: string
          description: A transformation to apply to the label text
          enum:
            - none
            - uppercase
            - lowercase
        opacity:
          type: number
          description: >-
            The opacity of the element, ranging from 0 to 1. Note that the
            opacity of a compound node parent affects the effective opacity of
            its children.See https://js.cytoscape.org/#style/visibility
          minimum: 0
          maximum: 1
        z-index:
          type: integer
          description: >-
            An integer value that affects the relative draw order of elements.
            In general, an element with a higher z-index will be drawn on top of
            an element with a lower z-index. Note that edges are under nodes
            despite z-index.
        label:
          type: string
          description: >-
            The text to display for an element’s label. Can give a path, e.g.
            data(id) will label with the elements id
    shape:
      type: string
      description: >-
        The shape of the node’s body. Note that each shape fits within the
        specified width and height, and so you may have to adjust width and
        height if you desire an equilateral shape (i.e. width !== height for
        several equilateral shapes)
      enum:
        - ellipse
        - triangle
        - round-triangle
        - rectangle
        - round-rectangle
        - bottom-round-rectangle
        - cut-rectangle
        - barrel
        - rhomboid
        - diamond
        - round-diamond
        - pentagon
        - round-pentagon
        - hexagon
        - round-hexagon
        - concave-hexagon
        - heptagon
        - round-heptagon
        - octagon
        - round-octagon
        - star
        - tag
        - round-tag
        - vee
        - polygon
    componentStyles:
      type: object
      description: Visualization styles for a component
      required:
        - shape
        - primaryColor
        - svgColor
        - svgWhite
      allOf:
        - $ref: '#/components/schemas/styles'
        - properties:
            shape:
              $ref: '#/components/schemas/shape'
            position:
              type: object
              additionalProperties: false
              required:
                - x
                - 'y'
              description: >-
                The position of the node. If the position is set, the node is
                drawn at that position in the given dimensions. If the position
                is not set, the node is drawn at a random position.
              properties:
                x:
                  type: number
                  description: The x-coordinate of the node.
                'y':
                  type: number
                  description: The y-coordinate of the node.
            body-text:
              type: string
              description: >-
                The text to display for an element’s body. Can give a path, e.g.
                data(id) will label with the elements id
            body-text-wrap:
              type: string
              description: >-
                How to wrap the text in the node. Can be 'none', 'wrap', or
                'ellipsis'.
            body-text-max-width:
              type: string
              description: The maximum width for wrapping text in the node.
            body-text-opacity:
              type: number
              description: The opacity of the node’s body text, including its outline.
              minimum: 0
              maximum: 1
            body-text-background-color:
              type: string
              description: >-
                The colour of the node’s body text background. Colours may be
                specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB
                (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
            body-text-font-size:
              type: string
              description: The size of the node’s body text.
            body-text-color:
              type: string
              description: >-
                The colour of the node’s body text. Colours may be specified by
                name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255,
                0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
            body-text-weight:
              type: string
              description: A CSS font weight to be applied to the node’s body text.
            body-text-horizontal-align:
              type: string
              description: >-
                A CSS horizontal alignment to be applied to the node’s body
                text.
            body-text-decoration:
              type: string
              description: A CSS text decoration to be applied to the node’s body text.
            body-text-vertical-align:
              type: string
              description: A CSS vertical alignment to be applied to the node’s body text.
            width:
              type: number
              description: The width of the node’s body or the width of an edge’s line.
            height:
              type: number
              description: The height of the node’s body
            background-color:
              type: string
              description: >-
                The colour of the node’s body. Colours may be specified by name
                (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0,
                0)), or HSL (e.g. hsl(0, 100%, 50%)).
            background-blacken:
              type: number
              description: >-
                Blackens the node’s body for values from 0 to 1; whitens the
                node’s body for values from 0 to -1.
              maximum: 1
              minimum: -1
            background-opacity:
              type: number
              description: The opacity level of the node’s background colour
              maximum: 1
              minimum: 0
            border-width:
              type: number
              description: The size of the node’s border.
              minimum: 0
            border-style:
              type: string
              description: The style of the node’s border
              enum:
                - solid
                - dotted
                - dashed
                - double
            border-color:
              type: string
              description: >-
                The colour of the node’s border. Colours may be specified by
                name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255,
                0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
            border-opacity:
              type: number
              description: The opacity of the node’s border
              minimum: 0
              maximum: 1
            padding:
              type: number
              description: The amount of padding around all sides of the node.
              minimum: 0
            text-halign:
              type: string
              description: The horizontal alignment of a node’s label
              enum:
                - left
                - center
                - right
            text-valign:
              type: string
              description: The vertical alignment of a node’s label
              enum:
                - top
                - center
                - bottom
            ghost:
              type: string
              description: >-
                Whether to use the ghost effect, a semitransparent duplicate of
                the element drawn at an offset.
              default: 'no'
              enum:
                - 'yes'
                - 'no'
            active-bg-color:
              type: string
              description: >-
                The colour of the indicator shown when the background is grabbed
                by the user. Selector needs to be *core*. Colours may be
                specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB
                (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
            active-bg-opacity:
              type: string
              description: ' The opacity of the active background indicator. Selector needs to be *core*.'
            active-bg-size:
              type: string
              description: ' The opacity of the active background indicator. Selector needs to be *core*.'
            selection-box-color:
              type: string
              description: >-
                The background colour of the selection box used for drag
                selection. Selector needs to be *core*. Colours may be specified
                by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g.
                rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
            selection-box-border-width:
              type: number
              description: >-
                The size of the border on the selection box. Selector needs to
                be *core*
            selection-box-opacity:
              type: number
              description: The opacity of the selection box.  Selector needs to be *core*
              minimum: 0
              maximum: 1
            outside-texture-bg-color:
              type: string
              description: >-
                The colour of the area outside the viewport texture when
                initOptions.textureOnViewport === true.  Selector needs to be
                *core*. Colours may be specified by name (e.g. red), hex (e.g.
                #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0,
                100%, 50%)).
            outside-texture-bg-opacity:
              type: number
              description: >-
                The opacity of the area outside the viewport texture. Selector
                needs to be *core*
              minimum: 0
              maximum: 1
    component:
      $id: https://schemas.meshery.io/component.json
      $schema: http://json-schema.org/draft-07/schema#
      description: >-
        Components are reusable building blocks for depicting capabilities
        defined within models. Learn more at
        https://docs.meshery.io/concepts/components
      additionalProperties: false
      type: object
      properties:
        id:
          description: >-
            Uniquely identifies the entity (i.e. component) as defined in a
            declaration (i.e. design).
          $ref: '#/components/schemas/uuid'
        schemaVersion:
          $ref: '#/components/schemas/versionString'
          description: >-
            Specifies the version of the schema to which the component
            definition conforms.
        version:
          $ref: '#/components/schemas/semverString'
          description: Version of the component definition.
          minLength: 1
          maxLength: 50
        displayName:
          $ref: '#/components/schemas/inputString'
          description: Name of the component in human-readible format.
        description:
          type: string
          description: >-
            A written representation of the purpose and characteristics of the
            component.
        format:
          type: string
          enum:
            - JSON
            - CUE
          default: JSON
          description: >-
            Format specifies the format used in the `component.schema` field.
            JSON is the default.
        model:
          $ref: '#/components/schemas/model'
          description: >-
            Reference to the specific registered model to which the component
            belongs and from which model version, category, and other properties
            may be referenced. Learn more at
            https://docs.meshery.io/concepts/models
          x-oapi-codegen-extra-tags:
            gorm: foreignKey:ModelId;references:Id
        styles:
          $ref: '#/components/schemas/componentStyles'
        capabilities:
          type: array
          description: >-
            Meshery manages components in accordance with their specific
            capabilities. This field explicitly identifies those capabilities
            largely by what actions a given component supports; e.g.
            metric-scrape, sub-interface, and so on. This field is extensible.
            ComponentDefinitions may define a broad array of capabilities, which
            are in-turn dynamically interpretted by Meshery for full lifecycle
            management.
          items:
            $ref: '#/components/schemas/capability'
        status:
          type: string
          description: >-
            Status of component, including:

            - duplicate: this component is a duplicate of another. The component
            that is to be the canonical reference and that is duplicated by
            other components should not be assigned the 'duplicate' status.

            - maintenance: model is unavailable for a period of time.

            - enabled: model is available for use for all users of this Meshery
            Server.

            - ignored: model is unavailable for use for all users of this
            Meshery Server.
          default: enabled
          enum:
            - ignored
            - enabled
            - duplicate
          x-oapi-codegen-extra-tags:
            yaml: status
            json: status
        metadata:
          type: object
          description: >-
            Metadata contains additional information associated with the
            component.
          properties:
            genealogy:
              type: string
              description: >-
                Genealogy represents the various representational states of the
                component.
            isAnnotation:
              type: boolean
              description: >-
                Identifies whether the component is semantically meaningful or
                not; identifies whether the component should be treated as
                deployable entity or is for purposes of logical representation.
            published:
              type: boolean
              description: >-
                'published' controls whether the component should be registered
                in Meshery Registry. When the same 'published' property in
                Models, is set to 'false', the Model property takes precedence
                with all Entities in the Model not being registered.
          x-oapi-codegen-extra-tags:
            gorm: type:bytes;serializer:json
          additionalProperties: true
        configuration:
          description: >-
            The configuration of the component. The configuration is based on
            the schema defined within the component
            definition(component.schema).
          type: object
          $comment: >-
            The configuration of the component. The configuration is based on
            the schema defined within the component
            definition(component.schema).
          x-oapi-codegen-extra-tags:
            gorm: type:bytes;serializer:json
        component:
          type: object
          description: Component and it's properties.
          properties:
            version:
              type: string
              description: >-
                Version of the component produced by the registrant. Example:
                APIVersion of a Kubernetes Pod.
            kind:
              type: string
              description: >-
                The unique identifier (name) assigned by the registrant to this
                component. Example: A Kubernetes Pod is of kind 'Pod'.
            schema:
              type: string
              description: JSON schema of the object as defined by the registrant.
          x-oapi-codegen-extra-tags:
            gorm: type:bytes;serializer:json
          required:
            - version
            - kind
            - schema
      required:
        - schemaVersion
        - version
        - model
        - component
    edgeStyles:
      type: object
      description: Visualization styles for a relationship
      allOf:
        - $ref: '#/components/schemas/styles'
        - properties:
            edge-animation:
              type: string
              description: >-
                The animation to use for the edge. Can be like 'marching-ants' ,
                'blink' , 'moving-gradient',etc .
            curve-style:
              type: string
              description: >-
                The curving method used to separate two or more edges between
                two nodes; may be haystack (very fast, bundled straight edges
                for which loops and compounds are unsupported), straight
                (straight edges with all arrows supported), bezier (bundled
                curved edges), unbundled-bezier (curved edges for use with
                manual control points), segments (a series of straight lines),
                taxi (right-angled lines, hierarchically bundled). Note that
                haystack edges work best with ellipse, rectangle, or similar
                nodes. Smaller node shapes, like triangle, will not be as
                aesthetically pleasing. Also note that edge endpoint arrows are
                unsupported for haystack edges.
              default: straight
              enum:
                - straight
                - haystack
                - bezier
                - unbundled-bezier
                - segments
                - taxi
            line-color:
              type: string
              description: >-
                The colour of the edge’s line. Colours may be specified by name
                (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0,
                0)), or HSL (e.g. hsl(0, 100%, 50%)).
            line-style:
              type: string
              description: The style of the edge’s line.
              enum:
                - solid
                - dotted
                - dashed
            line-cap:
              type: string
              description: >-
                The cap style of the edge’s line; may be butt (default), round,
                or square. The cap may or may not be visible, depending on the
                shape of the node and the relative size of the node and edge.
                Caps other than butt extend beyond the specified endpoint of the
                edge.
              enum:
                - butt
                - round
                - square
              default: butt
            line-opacity:
              type: number
              minimum: 0
              maximum: 1
              default: 1
              description: >-
                The opacity of the edge’s line and arrow. Useful if you wish to
                have a separate opacity for the edge label versus the edge line.
                Note that the opacity value of the edge element affects the
                effective opacity of its line and label subcomponents.
            target-arrow-color:
              type: string
              description: >-
                The colour of the edge’s source arrow. Colours may be specified
                by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g.
                rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
            target-arrow-shape:
              type: string
              description: The shape of the edge’s source arrow
              enum:
                - triangle
                - triangle-tee
                - circle-triangle
                - triangle-cross
                - triangle-backcurve
                - vee
                - tee
                - square
                - circle
                - diamond
                - chevron
                - none
            target-arrow-fill:
              type: string
              description: The fill state of the edge’s source arrow
              enum:
                - filled
                - hollow
            mid-target-arrow-color:
              type: string
              description: >-
                The colour of the edge’s source arrow. Colours may be specified
                by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g.
                rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
            mid-target-arrow-shape:
              type: string
              description: The shape of the edge’s source arrow
              enum:
                - triangle
                - triangle-tee
                - circle-triangle
                - triangle-cross
                - triangle-backcurve
                - vee
                - tee
                - square
                - circle
                - diamond
                - chevron
                - none
            mid-target-arrow-fill:
              type: string
              description: The fill state of the edge’s source arrow
              enum:
                - filled
                - hollow
            arrow-scale:
              type: number
              description: Scaling for the arrow size.
              minimum: 0
            source-label:
              type: string
              description: >-
                The text to display for an edge’s source label. Can give a path,
                e.g. data(id) will label with the elements id
            target-label:
              type: string
              description: >-
                The text to display for an edge’s target label. Can give a path,
                e.g. data(id) will label with the elements id
    relationshipStyles:
      anyOf:
        - $ref: '#/components/schemas/edgeStyles'
        - additionalProperties: true
          $comment: Extension point for additional styles
          $ref: '#/components/schemas/styles'
    selector:
      description: >-
        Describes the component(s) which are involved in the relationship along
        with a set of actions to perform upon selection match.
      type: array
      items:
        type: object
        additionalProperties: false
        properties:
          kind:
            type: string
          model:
            $ref: '#/components/schemas/model'
            description: >-
              Name of the model implicated by this selector. Learn more at
              https://docs.meshery.io/concepts/models
          id:
            $ref: '#/components/schemas/uuid'
          match:
            type: object
            additionalProperties: false
            patternProperties:
              id:
                $ref: ../core.json#/definitions/uuid
              self:
                description: >-
                  Defines paths which should be matched with the 'kind'
                  property.
                type: array
                items:
                  type: string
              ^[a-zA-Z_][a-zA-Z0-9_-]*[a-zA-Z0-9_]$:
                description: >-
                  Optional property which defines paths which should be matched
                  with 'self'. Here 'kind' is valid Component 'kind' belonging
                  to the above specifed model. eg: If model is Kubernetes, valid
                  'kind' are 'Pod', 'Secret'. If the value for all paths of
                  'self' & 'kind' along with the value of all paths inside
                  'to.match.self' & 'to.match.kind are equal then the component
                  with 'kind' act as an binded component. eg: ClusterRole,
                  ClusterRoleBinding and ServiceAccount. If the paths for
                  ClusterRole & ClusterRoleBinding and ServiceAccount &
                  ClusterRoleBinding are equal then ClusterRoleBinding acts as
                  an binding. Make sure the 'kind' value in 'from' and 'to'
                  should be equal.
                type: array
                items:
                  type: string
          patch:
            allOf:
              - properties:
                  patchStrategy:
                    description: >-
                      patchStrategy allows you to make specific changes to a
                      resource using a standard JSON Patch format (RFC 6902). 


                      add: Inserts a value into an array or adds a member to an
                      object.

                      replace: Replaces a value.

                      merge: Combines the values of the target location with the
                      values from the patch. If the target location doesn't
                      exist, it is created.

                      strategic:specific to Kubernetes and understands the
                      structure of Kubernetes objects. It can handle complex
                      changes like updating lists and maps, as well as
                      preserving default values. However, it's not supported for
                      custom resources. For custom resources, only JSON Patch
                      and Merge Patch are typically supported.

                      remove: Removes a value.

                      copy: Copies a value from one location to another.

                      move: Moves a value from one location to another.

                      test: Tests that a value at the target location is equal
                      to a specified value.
                    $comment: >-
                      Array Indexing: When working with arrays, be aware that
                      Kubernetes uses zero-based indexing in JSON patch paths.

                      Merge Patch vs. JSON Patch: Merge patches are less
                      flexible than JSON patches and do not support all the same
                      operations.

                      Strategic Merge Patch: For some Kubernetes resources, you
                      can also use the strategic type for a strategic merge
                      patch, which understands the structure of Kubernetes
                      objects and can handle complex operations.
                    type: string
                    enum:
                      - merge
                      - strategic
                      - add
                      - remove
                      - copy
                      - move
                      - test
                    default: copy
              - oneOf:
                  - properties:
                      mutatorRef:
                        type: array
                        items:
                          type: array
                          items:
                            type: string
                          description: >-
                            The sequence of mutatorRef and mutatedRef must
                            match. eg: mutatorRef: [[config, url], [config,
                            name]], mutatedRef: [[configPatch, value], [name]].
                            The value [config, url] will be patched at
                            [configPatch, value]. Similarly [config,name] will
                            be patched at [name].
                        description: JSON ref to value from where patch should be applied.
                  - properties:
                      mutatedRef:
                        type: array
                        items:
                          type: array
                          items:
                            type: string
                          description: >-
                            JSONPath (https://en.wikipedia.org/wiki/JSONPath) to
                            property to be patched.
        description: >-
          Optional fields that are a part of the `from` selector. Absence of a
          field has an implied * meaning.
    selectors:
      type: array
      description: >-
        Selectors are organized as an array, with each item containing a
        distinct set of selectors that share a common functionality. This
        structure allows for flexibility in defining relationships, even when
        different components are involved.
      $comment: >-
        Sets of selectors are interpreted as a logical UNION. Properties within
        a selector `allow` and `deny` are interpreted as logical AND, while
        'from' and 'to' represents a UNION of set of combinatorial pairs.
      items:
        type: object
        description: >-
          Optional selectors used to match Components. Absence of a selector
          means that it is applied to all Components.
        additionalProperties: false
        required:
          - allow
        properties:
          deny:
            description: >-
              Optional selectors used to define relationships which should not
              be created / is restricted.
            type: object
            required:
              - to
              - from
            properties:
              from:
                $ref: '#/components/schemas/selector'
              to:
                $ref: '#/components/schemas/selector'
          allow:
            description: Selectors used to define relationships which are allowed.
            type: object
            required:
              - to
              - from
            properties:
              from:
                $ref: '#/components/schemas/selector'
              to:
                $ref: '#/components/schemas/selector'
    relationship:
      $id: https://schemas.meshery.io/relationship.json
      $schema: http://json-schema.org/draft-07/schema#
      description: >-
        Relationships define the nature of interaction between interconnected
        components in Meshery. The combination of relationship properties kind,
        type, and subtype characterize various genealogical relations among and
        between components. Relationships have selectors, selector sets,
        metadata, and optional parameters. Learn more at
        https://docs.meshery.io/concepts/logical/relationships.
      required:
        - schemaVersion
        - version
        - model
        - kind
        - type
        - subType
      additionalProperties: false
      type: object
      properties:
        schemaVersion:
          $ref: '#/components/schemas/versionString'
          description: >-
            Specifies the version of the schema used for the relationship
            definition.
        version:
          $ref: '#/components/schemas/semverString'
          description: Specifies the version of the relationship definition.
        model:
          $ref: '#/components/schemas/model'
          description: Name of the model in which this relationship is packaged.
        kind:
          $ref: '#/components/schemas/inputString'
          description: >-
            Kind of the Relationship. Learn more about relationships -
            https://docs.meshery.io/concepts/logical/relationships.
          enum:
            - hierarchical
            - edge
            - sibling
        type:
          $ref: '#/components/schemas/inputString'
          description: >-
            Classification of relationships. Used to group relationships similar
            in nature.
        subType:
          $ref: '#/components/schemas/inputString'
          description: >-
            Most granular unit of relationship classification. The combination
            of Kind, Type and SubType together uniquely identify a Relationship.
        evaluationQuery:
          $ref: '#/components/schemas/inputString'
          description: >-
            Optional. Assigns the policy to be used for the evaluation of the
            relationship. Deprecation Notice: In the future, this property is
            either to be removed or to it is to be an array of optional policy
            $refs.
        capabilities:
          type: array
          description: Capabilities associated with the relationship.
          items:
            $ref: '#/components/schemas/capability'
          x-oapi-codegen-extra-tags:
            gorm: type:bytes;serializer:json
        metadata:
          type: object
          description: >-
            Metadata contains additional information associated with the
            Relationship.
          x-oapi-codegen-extra-tags:
            gorm: foreignKey:ModelId;references:Id
          properties:
            description:
              $ref: '#/components/schemas/inputString'
              description: >-
                Characterization of the meaning of the relationship and its
                relevance to both Meshery and entities under management.
            styles:
              $ref: '#/components/schemas/relationshipStyles'
        selectors:
          $ref: '#/components/schemas/selectors'
          x-oapi-codegen-extra-tags:
            gorm: type:bytes;serializer:json
    mesheryPatternResource:
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/text'
          description: Name
        namepace:
          $ref: '#/components/schemas/text'
          description: Namespace
        type:
          $ref: '#/components/schemas/text'
          description: Type
        oam_type:
          $ref: '#/components/schemas/text'
          description: OAM type
        deleted:
          type: boolean
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    mesheryPatternResourcePage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/mesheryPatternResource'
    mesheryPattern:
      properties:
        id:
          $ref: '#/components/schemas/id'
        user_id:
          $ref: '#/components/schemas/id'
        pattern_file:
          $ref: '#/components/schemas/designs'
          description: Pattern file
          x-oapi-codegen-extra-tags:
            gorm: type:bytes;serializer:json
        name:
          $ref: '#/components/schemas/text'
          description: Pattern Name
        location:
          $ref: '#/components/schemas/map_object'
        visibility:
          $ref: '#/components/schemas/text'
        catalog_data:
          $ref: '#/components/schemas/catalog_data'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
    mesheryPatternPage:
      allOf:
        - $ref: '#/components/schemas/resultsPage'
        - type: object
          properties:
            patterns:
              type: array
              items:
                $ref: '#/components/schemas/mesheryPattern'
    deletePatternModel:
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          description: Pattern name
          $ref: '#/components/schemas/text'
    designs:
      $schema: http://json-schema.org/draft-07/schema#
      title: Design Schema
      description: >-
        Designs are your primary tool for collaborative authorship of your
        infrastructure, workflow, and processes.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
          description: >-
            Name of the design; a descriptive, but concise title for the design
            document.
        schemaVersion:
          $ref: '#/components/schemas/versionString'
          description: Specifies the version of the schema to which the design conforms.
        version:
          $ref: '#/components/schemas/semverString'
          description: >-
            Revision of the design as expressed by an auto-incremented,
            SemVer-compliant version number. May be manually set by a user or
            third-party system, but will always be required to be of version
            number higher than the previously defined version number.
          minLength: 1
          maxLength: 50
        components:
          description: A list of one or more component declarations.
          type: array
          items:
            $ref: '#/components/schemas/component'
        preferences:
          type: object
          description: Design-level preferences
          properties:
            layers:
              type: array
              description: List of available layers
              items:
                type: string
          required:
            - layers
        relationships:
          description: List of relationships between components
          type: array
          items:
            $ref: '#/components/schemas/relationship'
      required:
        - name
        - schemaVersion
        - version
        - components
        - relationships
    catalog_data:
      type: object
      properties:
        publishedVersion:
          description: >-
            Tracks the specific content version that has been made available in
            the Catalog.
          type: string
        class:
          description: >-
            Published content is classifed by its support level. Content classes
            help you understand the origin and expected support level for each
            piece of content. It is important to note that the level of support
            may vary within each class, and you should exercise discretion when
            using community-contributed content. Content produced and fully
            supported by Meshery maintainers. This represents the highest level
            of support and is considered the most reliable. Content produced by
            partners and verified by Meshery maintainers. While not directly
            maintained by Meshery, it has undergone a verification process to
            ensure quality and compatibility. Content produced and supported by
            the respective project or organization responsible for the specific
            technology. This class offers a level of support from the project
            maintainers themselves. Content produced and shared by Meshery
            users. This includes a wide range of content, such as performance
            profiles, test results, filters, patterns, and applications.
            Community content may have varying levels of support and
            reliability.
          type: string
          oneOf:
            - const: official
              description: >-
                Content produced and fully supported by Meshery maintainers.
                This represents the highest level of support and is considered
                the most reliable.
            - const: verified
              description: >-
                Content produced by partners and verified by Meshery
                maintainers. While not directly maintained by Meshery, it has
                undergone a verification process to ensure quality and
                compatibility.
            - const: reference architecture
              description: >-
                Content produced and shared by Meshery users. This includes a
                wide range of content, such as performance profiles, test
                results, filters, patterns, and applications. Reference
                architecture content may have varying levels of support and
                reliability.
        compatibility:
          type: array
          title: Model
          items:
            enum:
              - kubernetes
            type: string
          uniqueItems: true
          minItems: 1
          description: >-
            One or more models associated with this catalog item. For designs, a
            list of one or more models implicated by components within the
            design. For models, this is self-referential.
        pattern_caveats:
          type: string
          title: Caveats and Considerations
          description: >-
            Specific stipulations to consider and known behaviors to be aware of
            when using this design.
        pattern_info:
          type: string
          title: Description
          minLength: 1
          description: Purpose of the design along with its intended and unintended uses.
        type:
          type: string
          title: Type
          enum:
            - Deployment
            - Observability
            - Resiliency
            - Scaling
            - Security
            - Traffic-management
            - Troubleshooting
            - Workloads
          default: Deployment
          description: >-
            Categorization of the type of design or operational flow depicted in
            this design.
        snapshotURL:
          type: array
          items:
            type: string
            format: uri
            pattern: ^(https?|http?|oci)://
          description: >-
            Contains reference to the dark and light mode snapshots of the
            design.
      required:
        - compatibility
        - pattern_caveats
        - pattern_info
        - type
    email:
      type: string
      format: email
      description: email
      x-go-type-skip-optional-pointer: true
    emails:
      type: array
      items:
        $ref: '#/components/schemas/email'
      x-go-type-skip-optional-pointer: true
    EvaluationRequest:
      type: object
      required:
        - design
      properties:
        design:
          $ref: '#/components/schemas/designs'
        options:
          type: object
          properties:
            returnDiffOnly:
              type: boolean
              description: >-
                If true, only return the diff of changes instead of the complete
                updated design
            enableTrace:
              type: boolean
              description: If true, include detailed trace information in the response
    EvaluationResponse:
      type: object
      description: Schema for the response of a relationship evaluation process in Meshery
      required:
        - schemaVersion
        - design
        - trace
      properties:
        schemaVersion:
          $ref: '#/components/schemas/inputString'
          description: >-
            Specifies the version of the schema to which the evaluation response
            conforms.
        design:
          $ref: '#/components/schemas/designs'
          description: >-
            The final evaluated design, including all updated components and
            relationships. This can be either the complete updated design or
            only a diff of changes. The version of the design will be
            automatically incremented if any modifications are made during the
            evaluation process. This field provides a comprehensive view of the
            design state after all relationship evaluations and policy
            applications have been completed.
        evaluationHash:
          type: string
          description: >-
            Hash of the input parameters and configuration used for this
            evaluation. Useful for identifying duplicate evaluations or caching
            results.
          example: a1b2c3d4e5f6g7h8i9j0
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 formatted timestamp of when the evaluation was completed.
        trace:
          type: object
          description: >-
            A detailed trace of the evaluation process, including actions taken
            and changes made.
          properties:
            policyActions:
              type: array
              description: List of policy actions applied during the evaluation.
              items:
                type: string
            relationshipsAdded:
              type: array
              description: List of new relationships added to the design.
              items:
                $ref: '#/components/schemas/relationship'
            relationshipsRemoved:
              type: array
              description: List of relationships removed from the design.
              items:
                $ref: '#/components/schemas/relationship'
            componentsAdded:
              type: array
              description: List of new components added to the design.
              items:
                $ref: '#/components/schemas/component'
            componentsRemoved:
              type: array
              description: List of components removed from the design.
              items:
                $ref: '#/components/schemas/component'
          required:
            - policyActions
            - relationshipsAdded
            - relationshipsRemoved
            - componentsAdded
            - componentsRemoved
    workspace:
      properties:
        ID:
          $ref: '#/components/schemas/general_id'
        name:
          $ref: '#/components/schemas/text'
        description:
          $ref: '#/components/schemas/text'
        organization_id:
          $ref: '#/components/schemas/organization_id'
        owner:
          $ref: '#/components/schemas/text'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/nullTime'
    workspacesTeamsMapping:
      properties:
        ID:
          $ref: '#/components/schemas/general_id'
        team_id:
          $ref: '#/components/schemas/team_id'
        workspace_id:
          $ref: '#/components/schemas/workspace_id'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/nullTime'
    workspacesEnvironmentsMapping:
      properties:
        ID:
          $ref: '#/components/schemas/general_id'
        environment_id:
          $ref: '#/components/schemas/environment_id'
        workspace_id:
          $ref: '#/components/schemas/workspace_id'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/nullTime'
    workspacesViewsMapping:
      properties:
        ID:
          $ref: '#/components/schemas/general_id'
        view_id:
          $ref: '#/components/schemas/view_id'
        workspace_id:
          $ref: '#/components/schemas/workspace_id'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/nullTime'
    workspacesDesignsMapping:
      properties:
        ID:
          $ref: '#/components/schemas/general_id'
        design_id:
          $ref: '#/components/schemas/design_id'
        workspace_id:
          $ref: '#/components/schemas/workspace_id'
        created_at:
          $ref: '#/components/schemas/time'
        updated_at:
          $ref: '#/components/schemas/time'
        deleted_at:
          $ref: '#/components/schemas/nullTime'
    workspaceUpdatePayload:
      properties:
        name:
          $ref: '#/components/schemas/text'
          description: Name of workspace
        description:
          $ref: '#/components/schemas/text'
          description: Environment description
        organization_id:
          type: string
          description: Organization ID
          x-go-type-skip-optional-pointer: true
          x-go-name: OrganizationID
          x-oapi-codegen-extra-tags:
            json: organization_id
      required:
        - organization_id
    workspacePayload:
      properties:
        name:
          $ref: '#/components/schemas/text'
          description: Name
        description:
          $ref: '#/components/schemas/text'
          description: Environment description
        organization_id:
          type: string
          description: Organization ID
          x-go-type-skip-optional-pointer: true
          x-go-name: OrganizationID
          x-oapi-codegen-extra-tags:
            json: organization_id
      required:
        - name
        - organization_
    workspacePage:
      properties:
        page:
          $ref: '#/components/schemas/number'
        page_size:
          $ref: '#/components/schemas/number'
        total_count:
          $ref: '#/components/schemas/number'
        workspaces:
          type: array
          x-go-type-skip-optional-pointer: true
          items:
            $ref: '#/components/schemas/workspace'
    general_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: id
        json: id
      x-go-type-name: GeneralId
      x-go-type-skip-optional-pointer: true
    organization_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: org_id
        json: org_id
      x-go-type-name: OrganizationId
      x-go-type-skip-optional-pointer: true
    nullTime:
      description: SQL null Timestamp to handle null values of time.
      x-go-type: sql.NullTime
      type: string
      x-go-type-skip-optional-pointer: true
    team_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: team_id
        json: team_id
      x-go-type-name: TeamId
      x-go-type-skip-optional-pointer: true
    workspace_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: workspace_id
        json: workspace_id
      x-go-type-name: WorkspaceId
      x-go-type-skip-optional-pointer: true
    environment_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: environment_id
        json: environment_id
      x-go-type-name: EnvironmentId
      x-go-type-skip-optional-pointer: true
    view_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: view_id
        json: view_id
      x-go-type-name: ViewId
      x-go-type-skip-optional-pointer: true
    design_id:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/gofrs/uuid
      x-oapi-codegen-extra-tags:
        db: design_id
        json: design_id
      x-go-type-name: DesignId
      x-go-type-skip-optional-pointer: true
    number:
      type: integer
      x-go-type-skip-optional-pointer: true
  requestBodies:
    connectionPayload:
      content:
        application/json:
          schema:
            type: object
            properties:
              kind:
                $ref: '#/components/schemas/text'
                description: Kind
              type:
                $ref: '#/components/schemas/text'
                description: Connection type
              sub_type:
                $ref: '#/components/schemas/text'
                description: Connection subtype
              credential_secret:
                $ref: '#/components/schemas/map_object'
              metadata:
                $ref: '#/components/schemas/map_object'
    mesheryPatternResource:
      description: Body for upserting meshery pattern resource
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/mesheryPatternResource'
    mesheryPatternRequestBody:
      description: Body for upserting meshery pattern
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              url:
                $ref: '#/components/schemas/text'
              path:
                $ref: '#/components/schemas/text'
              save:
                type: boolean
              pattern_data:
                $ref: '#/components/schemas/mesheryPattern'
    mesheryPatternDeleteRequestBody:
      description: Body for deleting meshery pattern
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              patterns:
                type: array
                items:
                  $ref: '#/components/schemas/deletePatternModel'
    designShare:
      description: Body for sharing design
      required: true
      content:
        application/json:
          schema:
            properties:
              emails:
                $ref: '#/components/schemas/emails'
              id:
                $ref: '#/components/schemas/id'
              content_type:
                type: string
              share:
                type: boolean
            required:
              - emails
              - id
              - content_type
              - share
    workspacePayload:
      description: Body for creating workspace
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/workspacePayload'
    workspaceUpdatePayload:
      description: Body for updating workspace
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/workspaceUpdatePayload'
  securitySchemes:
    jwt:
      type: http
      scheme: Bearer
      bearerFormat: JWT
  parameters:
    connectionKind:
      name: connectionKind
      in: path
      description: 'Connection kind (eg: Meshery)'
      required: true
      schema:
        $ref: '#/components/schemas/text'
    connectionId:
      name: connectionId
      in: path
      description: Connection ID
      schema:
        $ref: '#/components/schemas/id'
      required: true
    serverId:
      name: mesheryServerID
      in: path
      description: Meshery server ID
      schema:
        $ref: '#/components/schemas/id'
      required: true
    page:
      name: page
      in: query
      description: Get reponses by page
      schema:
        type: string
    page_size:
      name: page_size
      in: query
      description: Get reponses by pageSize
      schema:
        type: string
    search:
      name: search
      in: query
      description: Get responses that match search param value
      schema:
        type: string
    order:
      name: order
      in: query
      description: Get ordered responses
      schema:
        type: string
  responses:
    '200':
      description: ok
      content:
        text/plain:
          schema:
            type: string
    '401':
      description: Expired JWT token used or insufficient privilege
      content:
        text/plain:
          schema:
            type: string
    '500':
      description: Internal server error
      content:
        text/plain:
          schema:
            type: string
x-tagGroups:
  - name: Meshery Cloud
    tags:
      - integrations
      - patterns
      - workspaces
  - name: Meshery Relationship Evaluation API
    tags:
      - relationshipEvaluation_other
