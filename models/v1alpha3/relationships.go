// Package v1alpha3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 .
package v1alpha3

import (
	"github.com/gofrs/uuid"
	"github.com/meshery/schemas/models/v1beta1/model"
)

// Defines values for RelationshipDefinitionKind.
const (
	Edge         RelationshipDefinitionKind = "Edge"
	Hierarchical RelationshipDefinitionKind = "Hierarchical"
	Sibling      RelationshipDefinitionKind = "Sibling"
)

// Defines values for RelationshipDefinitionSelectorsAllowFromModelStatus.
const (
	RelationshipDefinitionSelectorsAllowFromModelStatusDuplicate RelationshipDefinitionSelectorsAllowFromModelStatus = "duplicate"
	RelationshipDefinitionSelectorsAllowFromModelStatusEnabled   RelationshipDefinitionSelectorsAllowFromModelStatus = "enabled"
	RelationshipDefinitionSelectorsAllowFromModelStatusIgnored   RelationshipDefinitionSelectorsAllowFromModelStatus = "ignored"
)

// Defines values for RelationshipDefinitionSelectorsAllowFromPatchPatchStrategy.
const (
	RelationshipDefinitionSelectorsAllowFromPatchPatchStrategyReplace RelationshipDefinitionSelectorsAllowFromPatchPatchStrategy = "replace"
)

// Defines values for RelationshipDefinitionSelectorsAllowToModelStatus.
const (
	RelationshipDefinitionSelectorsAllowToModelStatusDuplicate RelationshipDefinitionSelectorsAllowToModelStatus = "duplicate"
	RelationshipDefinitionSelectorsAllowToModelStatusEnabled   RelationshipDefinitionSelectorsAllowToModelStatus = "enabled"
	RelationshipDefinitionSelectorsAllowToModelStatusIgnored   RelationshipDefinitionSelectorsAllowToModelStatus = "ignored"
)

// Defines values for RelationshipDefinitionSelectorsAllowToPatchPatchStrategy.
const (
	RelationshipDefinitionSelectorsAllowToPatchPatchStrategyReplace RelationshipDefinitionSelectorsAllowToPatchPatchStrategy = "replace"
)

// Defines values for RelationshipDefinitionSelectorsDenyFromModelStatus.
const (
	RelationshipDefinitionSelectorsDenyFromModelStatusDuplicate RelationshipDefinitionSelectorsDenyFromModelStatus = "duplicate"
	RelationshipDefinitionSelectorsDenyFromModelStatusEnabled   RelationshipDefinitionSelectorsDenyFromModelStatus = "enabled"
	RelationshipDefinitionSelectorsDenyFromModelStatusIgnored   RelationshipDefinitionSelectorsDenyFromModelStatus = "ignored"
)

// Defines values for RelationshipDefinitionSelectorsDenyFromPatchPatchStrategy.
const (
	RelationshipDefinitionSelectorsDenyFromPatchPatchStrategyReplace RelationshipDefinitionSelectorsDenyFromPatchPatchStrategy = "replace"
)

// Defines values for RelationshipDefinitionSelectorsDenyToModelStatus.
const (
	Duplicate RelationshipDefinitionSelectorsDenyToModelStatus = "duplicate"
	Enabled   RelationshipDefinitionSelectorsDenyToModelStatus = "enabled"
	Ignored   RelationshipDefinitionSelectorsDenyToModelStatus = "ignored"
)

// Defines values for RelationshipDefinitionSelectorsDenyToPatchPatchStrategy.
const (
	RelationshipDefinitionSelectorsDenyToPatchPatchStrategyReplace RelationshipDefinitionSelectorsDenyToPatchPatchStrategy = "replace"
)

type MatchDefinition struct {
	// Id A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
	Id *uuid.UUID `json:"id" yaml:"id"`

	// Kind Optional property which defines paths which should be matched with 'self'. Here 'kind' is valid Component 'kind' belonging to the above specifed model. eg: If model is Kubernetes, valid 'kind' are 'Pod', 'Secret'. If the value for all paths of 'self' & 'kind' along with the value of all paths inside 'to.match.self' & 'to.match.kind are equal then the component with 'kind' act as an binded component. eg: ClusterRole, ClusterRoleBinding and ServiceAccount. If the paths for ClusterRole & ClusterRoleBinding and ServiceAccount & ClusterRoleBinding are equal then ClusterRoleBinding acts as an binding. Make sure the 'kind' value in 'from' and 'to' should be equal.
	Kind *[]string `json:"kind,omitempty"`

	// Self Defines paths which should be matched with the 'kind' property.
	Self *[]string `json:"self,omitempty"`
}

type PatchDefinition struct {
	// MutatorRef JSON ref to value from where patch should be applied.
	MutatorRef    *[][]string                                                `json:"mutatorRef,omitempty" yaml:"mutatorRef"`
	PatchStrategy *RelationshipDefinitionSelectorsDenyFromPatchPatchStrategy `json:"patchStrategy" yaml:"patchStrategy"`
}

type RelationshipConfiguration struct {
	// Id A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
	Id    *uuid.UUID       `json:"id" yaml:"id"`
	Kind  *string          `json:"kind" yaml:"kind"`
	Match *MatchDefinition `json:"match,omitempty" yaml:"match"`

	// Model Name of the model implicated by this selector. Learn more at https://docs.meshery.io/concepts/models
	Model model.ModelDefinition `json:"model,omitempty" yaml:"model"`
	Patch *PatchDefinition       `json:"patch,omitempty" yaml:"patch"`
}

type Configuration struct {
	From []RelationshipConfiguration `json:"from" yaml:"from"`
	To   []RelationshipConfiguration `json:"to" yaml:"to"`
}

type Selector struct {
	// Allow Selectors used to define relationships which are allowed.
	Allow Configuration `json:"allow" yaml:"allow"`

	// Deny Optional selectors used to define relationships which should not be created / is restricted.
	Deny Configuration `json:"deny,omitempty" yaml:"deny"`
}

// RelationshipDefinition Relationships define the nature of interaction between interconnected components in Meshery. The combination of relationship properties kind, type, and subtype characterize various genealogical relations among and between components. Relationships have selectors, selector sets, metadata, and optional parameters. Learn more at https://docs.meshery.io/concepts/logical/relationships.
type RelationshipDefinition struct {
	// EvaluationQuery Optional. Assigns the policy to be used for the evaluation of the relationship. Deprecation Notice: In the future, this property is either to be removed or to it is to be an array of optional policy $refs.
	EvaluationQuery *string `json:"evaluationQuery" yaml:"evaluationQuery"`

	// Kind Kind of the Relationship. Learn more about relationships - https://docs.meshery.io/concepts/logical/relationships.
	Kind RelationshipDefinitionKind `json:"kind" yaml:"kind"`

	// Metadata Metadata contains additional information associated with the Relationship.
	Metadata *struct {
		// Description Characteristization of the meaning of the relationship and its relevance to both Meshery and entities under management.
		Description *string `json:"description" yaml:"description"`
	} `json:"metadata,omitempty"`

	// Model Name of the model in which this relationship is packaged.
	Model model.ModelDefinition `json:"model"`

	// SchemaVersion Specifies the version of the schema used for the relationship definition.
	SchemaVersion string `json:"schemaVersion" yaml:"schemaVersion"`

	// Selectors Selectors are organized as an array, with each item containing a distinct set of selectors that share a common functionality. This structure allows for flexibility in defining relationships, even when different components are involved.
	Selectors []Selector `json:"selectors,omitempty" yaml:"selectors"`

	// SubType Most granular unit of relationship classification. The combination of Kind, Type and SubType together uniquely identify a Relationship.
	SubType string `json:"subType" yaml:"subType"`

	// Type Classification of relationships. Used to group relationships similar in nature.
	Type string `json:"type" yaml:"type"`

	// Version Specifies the version of the relationship definition.
	Version string `json:"version" yaml:"version"`
}

// RelationshipDefinitionKind Kind of the Relationship. Learn more about relationships - https://docs.meshery.io/concepts/logical/relationships.
type RelationshipDefinitionKind string

// RelationshipDefinitionSelectorsAllowFromModelStatus Status of model, including:
// - duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.
// - maintenance: model is unavailable for a period of time.
// - enabled: model is available for use for all users of this Meshery Server.
// - ignored: model is unavailable for use for all users of this Meshery Server.
type RelationshipDefinitionSelectorsAllowFromModelStatus string

// RelationshipDefinitionSelectorsAllowFromPatchPatchStrategy defines model for RelationshipDefinition.Selectors.Allow.From.Patch.PatchStrategy.
type RelationshipDefinitionSelectorsAllowFromPatchPatchStrategy string

// RelationshipDefinitionSelectorsAllowToModelStatus Status of model, including:
// - duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.
// - maintenance: model is unavailable for a period of time.
// - enabled: model is available for use for all users of this Meshery Server.
// - ignored: model is unavailable for use for all users of this Meshery Server.
type RelationshipDefinitionSelectorsAllowToModelStatus string

// RelationshipDefinitionSelectorsAllowToPatchPatchStrategy defines model for RelationshipDefinition.Selectors.Allow.To.Patch.PatchStrategy.
type RelationshipDefinitionSelectorsAllowToPatchPatchStrategy string

// RelationshipDefinitionSelectorsDenyFromModelStatus Status of model, including:
// - duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.
// - maintenance: model is unavailable for a period of time.
// - enabled: model is available for use for all users of this Meshery Server.
// - ignored: model is unavailable for use for all users of this Meshery Server.
type RelationshipDefinitionSelectorsDenyFromModelStatus string

// RelationshipDefinitionSelectorsDenyFromPatchPatchStrategy defines model for RelationshipDefinition.Selectors.Deny.From.Patch.PatchStrategy.
type RelationshipDefinitionSelectorsDenyFromPatchPatchStrategy string

// RelationshipDefinitionSelectorsDenyToModelStatus Status of model, including:
// - duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.
// - maintenance: model is unavailable for a period of time.
// - enabled: model is available for use for all users of this Meshery Server.
// - ignored: model is unavailable for use for all users of this Meshery Server.
type RelationshipDefinitionSelectorsDenyToModelStatus string

// RelationshipDefinitionSelectorsDenyToPatchPatchStrategy defines model for RelationshipDefinition.Selectors.Deny.To.Patch.PatchStrategy.
type RelationshipDefinitionSelectorsDenyToPatchPatchStrategy string
